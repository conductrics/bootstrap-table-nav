// Generated by CoffeeScript 1.6.3
(function() {
  (function($) {
    var alignTable, endIndexForPage, getRows, numPages, onPageNav, paint, paintPagination, paintTableRows, realMod, startIndexForPage, tableNav,
      _this = this;
    tableNav = function(opts) {
      return $.each($(this.selector), function(idx, table) {
        var options, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        options = {};
        options.table = $(table);
        options.childSelector = (_ref = opts.childSelector) != null ? _ref : 'tr';
        options.paginationSelector = (_ref1 = opts.pagination) != null ? _ref1 : options.table.siblings('.pagination');
        options.itemsPerPage = (_ref2 = opts.itemsPerPage) != null ? _ref2 : 10;
        options.hideWhenOnePage = (_ref3 = opts.hideWhenOnePage) != null ? _ref3 : true;
        options.currentPage = (_ref4 = opts.initialPage) != null ? _ref4 : 0;
        options.alignLastPage = (_ref5 = opts.alignLastPage) != null ? _ref5 : true;
        $(options.paginationSelector).on('click', 'li', options, onPageNav);
        alignTable(options);
        return paint(options);
      });
    };
    startIndexForPage = function(options, page) {
      return options.itemsPerPage * page;
    };
    endIndexForPage = function(options, page) {
      return startIndexForPage(options, page + 1) - 1;
    };
    getRows = function(options) {
      return options.table.find(options.childSelector);
    };
    numPages = function(options) {
      return Math.ceil(getRows(options).length / options.itemsPerPage);
    };
    paint = function(options) {
      paintTableRows(options);
      return paintPagination(options);
    };
    onPageNav = function(ev) {
      ev.data.currentPage = parseInt($(ev.target).attr('data-page-num'));
      return paint(ev.data);
    };
    paintTableRows = function(options) {
      var endRow, startRow;
      startRow = startIndexForPage(options, options.currentPage);
      endRow = endIndexForPage(options, options.currentPage);
      options.table.find("" + options.childSelector + ":hidden").show();
      options.table.find("" + options.childSelector + ":lt(" + startRow + ")").hide();
      return options.table.find("" + options.childSelector + ":gt(" + endRow + ")").hide();
    };
    paintPagination = function(options) {
      var cssClass, i, markup, num, pagination, _i;
      num = numPages(options);
      pagination = $(options.paginationSelector);
      if (num === 1 && options.hideWhenOnePage) {
        return pagination.hide();
      }
      markup = [];
      for (i = _i = 0; 0 <= num ? _i < num : _i > num; i = 0 <= num ? ++_i : --_i) {
        cssClass = i === options.currentPage ? 'active' : '';
        markup.push("<li class='" + cssClass + "'><a href='#' data-page-num='" + i + "'>" + (i + 1) + "</a></li>");
      }
      return pagination.show().empty().append("<ul>" + (markup.join('')) + "</ul>");
    };
    alignTable = function(options) {
      var numCol, parent, rowsToAdd;
      rowsToAdd = realMod(getRows(options).length, options.itemsPerPage);
      parent = options.table.find(options.childSelector).parent();
      numCol = $(options.table.find(options.childSelector)[0]).children().length;
      return parent.append(Array(rowsToAdd + 1).join('<tr><td colspan="' + numCol + '">&ensp;</td></tr>'));
    };
    realMod = function(n, base) {
      var jsmod;
      if (!((jsmod = n % base) && ((n > 0) !== (base > 0)))) {
        return jsmod;
      } else {
        return jsmod + base;
      }
    };
    return $.extend(jQuery.fn, {
      tableNav: tableNav
    });
  })(window.jQuery);

}).call(this);

/*
//@ sourceMappingURL=bootstrap-table-nav.map
*/
